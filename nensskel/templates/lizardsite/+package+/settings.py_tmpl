# Base Django settings, suitable for production.
#
# Imported (and partly overridden) by developmentsettings.py which also
# imports localsettings.py (which isn't stored in svn).  Buildout takes care
# of using the correct one.
#
# So: "DEBUG = TRUE" goes into developmentsettings.py and per-developer
# database ports go into localsettings.py.  May your hear turn purple if you
# ever put personal settings into this file or into developmentsettings.py!
#

import os

# SETTINGS_DIR allows media paths and so to be relative to this settings file
# instead of hardcoded to c:\only\on\my\computer.
SETTINGS_DIR = os.path.dirname(os.path.realpath(__file__))

# Production, so DEBUG is False. developmentsettings.py sets it to True.
DEBUG = False
TEMPLATE_DEBUG = DEBUG

# ADMINS get internal error mails, MANAGERS get 404 mails.
ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)
MANAGERS = ADMINS

# TODO: Switch this to the real production database.
DATABASE_ENGINE = 'sqlite3'
# ^^^ 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
DATABASE_NAME = '${package}'
DATABASE_USER = '${package}'
DATABASE_PASSWORD = '${package}'
DATABASE_HOST = '' # empty string for localhost.
DATABASE_PORT = '' # empty string for default.

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name although not all
# choices may be available on all operating systems.  If running in a Windows
# environment this must be set to the same as your system time zone.
TIME_ZONE = 'Europe/Amsterdam'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
# LANGUAGE_CODE = 'nl-NL'
LANGUAGE_CODE = 'en-US'

# For at-runtime language switching.  Note: they're shown in reverse order in
# the interface!
LANGUAGES = (
    ('en', 'English'),
)

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not to
# load the internationalization machinery.
USE_I18N = True

# TODO IN NENSSKEL: Figure out good defaults for media, probably with
# http://pypi.python.org/pypi/django-staticfiles behind it.
# Absolute path to the directory that holds media.
MEDIA_ROOT = os.path.join(SETTINGS_DIR, 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = '/static_media/'

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
ADMIN_MEDIA_PREFIX = '/admin_media/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = '${secret_key}'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
)

ROOT_URLCONF = '${package}.urls'

CACHE_BACKEND = 'locmem:///'
# Note: for development only, check django website for caching solutions for
# production environments
# ^^^ TODO

# NENSSKEL TODO: check templates dir location and use. This one was for
# overriding existing templates, right?
TEMPLATE_DIRS = (
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(SETTINGS_DIR, 'templates')
    # Installed apps' templates are loaded automatically by the
    # "app_directories" template loader
)

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    # 'django.contrib.gis',
    # 'django.contrib.gis.db',
    'django.contrib.markup',
    'django.contrib.sessions',
    'django.contrib.sites',
    #'django.contrib.databrowse',
    '${package}',
)
